{"version":3,"sources":["doneStamp.png","redux/actionTypes.js","App.js","redux/action.js","redux/reducers/todos.js","redux/reducers/users.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["ADD_TODO","DELETE_TODO","ADD_USER","TOGGLE_TODO","EDIT_TODO","EDIT_CONFIRM","Background","styled","div","Title","Wrapper","Input","input","SingleTodoWrapper","TodoContent","props","isDone","img","ButtonWrapper","Button","button","whichTabActive","Navbar","content","handleContentChange","handleAdd","handleShow","style","marginBottom","type","value","onChange","placeholder","size","onClick","current","showAll","showDone","showUndo","SingleTodo","todo","handleToggle","handleEditClick","handleDelete","handleEditChange","handleEditConfirm","id","isEditing","defaultValue","autoFocus","App","useState","setContent","editContent","setEditContent","showType","setShowType","todos","useSelector","store","dispatch","useDispatch","useRef","e","target","payload","editConfirm","alert","addTodo","innerText","filter","map","toggleTodo","editTodo","deleteTodo","todoId","initialState","users","combineReducers","state","action","console","log","name","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8d60cd89.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/doneStamp.29e02b1c.png\";","export const ADD_TODO = 'add_todo'\nexport const DELETE_TODO = 'delete_todo'\nexport const ADD_USER = 'add_user'\nexport const TOGGLE_TODO = 'toggle_todo'\nexport const EDIT_TODO = 'edit_todo'\nexport const EDIT_CONFIRM = 'edit_confirm'\n","import styled from 'styled-components' // 引入一個可以寫 css 的 package\nimport React, { useState, useRef } from 'react' // 要引入才可以用 state, ref\nimport { useSelector, useDispatch } from 'react-redux'\nimport img from './doneStamp.png'\n\nimport {\n  deleteTodo,\n  addTodo,\n  toggleTodo,\n  editTodo,\n  editConfirm,\n} from './redux/action'\n\n// 底下就是用 styled 寫的 css ，要 .創造的標籤\n// 然後就可以打一些 css, sass, scss 的寫法\nconst Background = styled.div``\nconst Title = styled.div`\n  color: black;\n  font-size: 100px;\n  text-align: center;\n  margin-bottom: 40px;\n  font-weight: bolder;\n  -webkit-text-stroke: 3px #fff;\n`\nconst Wrapper = styled.div`\n  width: 1000px;\n  height: auto;\n  margin: auto;\n  margin-top: 50px;\n`\nconst Input = styled.input`\n  margin-right: 20px;\n  border-radius: 8px;\n  padding: 18px;\n  font-size: 20px;\n  border: black solid 2px;\n`\nconst SingleTodoWrapper = styled.div`\n  border-radius: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 8px 16px;\n  border: 2px solid white;\n  & + & {\n    margin-top: 20px;\n  }\n  margin-top: 15px;\n`\n\nconst TodoContent = styled.div`\n  padding: 15px;\n  font-size: 35px;\n  color: #ffbde5;\n  word-break: break-all;\n  width: 600px;\n  position: relative;\n  ${props =>\n    props.isDone\n      ? `&:after {\n      content: '';\n      width: 90px;\n      height: 78px;\n      position: absolute;\n      left: 540px;\n      top: -3px;\n      background-image: url(${img});\n      background-size: 100%;\n      z-index: 1;\n    }`\n      : ''}\n`\nconst ButtonWrapper = styled.div``\nconst Button = styled.button`\n  font-size: 25px;\n  padding: 15px;\n  color: white;\n  margin-right: 10px;\n  border-radius: 10px;\n  background: black;\n  border: white 2px outset;\n  transition: 0.5s;\n  &:hover {\n    color: black;\n    background: white;\n    border: black 2px outset;\n    transition: 0.2s;\n    cursor: pointer;\n  }\n  ${props =>\n    !props.whichTabActive\n      ? ''\n      : props.whichTabActive\n      ? `color: black;\n  background: white;\n  border: black 2px outset;\n  transition: 0.2s;`\n      : ''}\n`\nfunction Navbar({\n  content,\n  handleContentChange,\n  handleAdd,\n  handleShow,\n  whichTabActive,\n}) {\n  return (\n    <div style={{ marginBottom: '45px' }}>\n      <Input\n        type=\"text\"\n        value={content}\n        onChange={handleContentChange}\n        placeholder=\"Type something   (//●⁰౪⁰●)//\"\n        size=\"25\"\n      />\n      <Button onClick={handleAdd}>add todo</Button>\n      <Button\n        whichTabActive={whichTabActive.current.showAll}\n        onClick={handleShow}\n      >\n        show all\n      </Button>\n      <Button\n        whichTabActive={whichTabActive.current.showDone}\n        onClick={handleShow}\n      >\n        show done\n      </Button>\n      <Button\n        whichTabActive={whichTabActive.current.showUndo}\n        onClick={handleShow}\n      >\n        show undo\n      </Button>\n    </div>\n  )\n}\nfunction SingleTodo({\n  todo,\n  handleToggle,\n  handleEditClick,\n  handleDelete,\n  handleEditChange,\n  handleEditConfirm,\n}) {\n  return (\n    <SingleTodoWrapper id={todo.id}>\n      {todo.isEditing ? (\n        <Input\n          type=\"text\"\n          defaultValue={todo.content}\n          size=\"30\"\n          onChange={handleEditChange}\n          autoFocus\n        />\n      ) : (\n        <TodoContent isDone={todo.isDone}>{todo.content}</TodoContent>\n      )}\n      <ButtonWrapper>\n        {todo.isEditing ? null : (\n          <Button onClick={() => handleToggle(todo.id)}>\n            {todo.isDone ? 'undo' : 'done'}\n          </Button>\n        )}\n        {todo.isEditing ? (\n          <Button onClick={() => handleEditClick(todo.id)}>Cancel</Button>\n        ) : (\n          <Button onClick={() => handleEditClick(todo.id)}>Edit</Button>\n        )}\n        {todo.isEditing ? (\n          <Button onClick={() => handleEditConfirm(todo.id)}>Confirm</Button>\n        ) : (\n          <Button onClick={() => handleDelete(todo.id)}>Delete</Button>\n        )}\n      </ButtonWrapper>\n    </SingleTodoWrapper>\n  )\n}\nfunction App() {\n  const [content, setContent] = useState('')\n  const [editContent, setEditContent] = useState('')\n  const [showType, setShowType] = useState('all')\n  const todos = useSelector(store => store.todos.todos)\n  const dispatch = useDispatch()\n  const whichTabActive = useRef({\n    showAll: true,\n    showDone: false,\n    showUndo: false,\n  })\n\n  function handleEditChange(e) {\n    setEditContent(e.target.value) // 取出正在 edit 的 todo 的內容\n  }\n  function handleContentChange(e) {\n    setContent(e.target.value) // 取出最上方新輸入 todo 的內容\n  }\n  function handleAdd() {\n    if (content === '') return alert('Please type something in the input box')\n    dispatch(addTodo(content))\n    setContent('')\n  }\n\n  function handleEditConfirm(id) {\n    dispatch(editConfirm(id, editContent))\n  }\n\n  function handleShow(e) {\n    if (e.target.innerText === 'show all') {\n      whichTabActive.current = {\n        showAll: true,\n        showDone: false,\n        showUndo: false,\n      }\n      return setShowType('all')\n    }\n    if (e.target.innerText === 'show undo') {\n      whichTabActive.current = {\n        showAll: false,\n        showDone: false,\n        showUndo: true,\n      }\n      return setShowType('undo')\n    }\n    if (e.target.innerText === 'show done') {\n      whichTabActive.current = {\n        showAll: false,\n        showDone: true,\n        showUndo: false,\n      }\n      return setShowType('done')\n    }\n  }\n  return (\n    <Background>\n      <Wrapper>\n        <Title>Todo List</Title>\n        <Navbar\n          content={content}\n          handleContentChange={handleContentChange}\n          handleAdd={handleAdd}\n          handleShow={handleShow}\n          whichTabActive={whichTabActive}\n        />\n        {todos\n          .filter(todo => {\n            if (showType === 'undo') return todo.isDone === false\n            if (showType === 'done') return todo.isDone === true\n            if (showType === 'all') return true\n          })\n          .map(todo => (\n            <SingleTodo\n              key={todo.id}\n              todo={todo}\n              handleToggle={id => dispatch(toggleTodo(id))} // undo 變 done, done 變 undo\n              handleEditClick={id => dispatch(editTodo(id))}\n              handleEditChange={handleEditChange}\n              handleEditConfirm={handleEditConfirm}\n              handleDelete={id => dispatch(deleteTodo(id))}\n            ></SingleTodo>\n          ))}\n      </Wrapper>\n    </Background>\n  )\n}\nexport default App\n","import {\n  ADD_TODO,\n  DELETE_TODO,\n  TOGGLE_TODO,\n  EDIT_TODO,\n  EDIT_CONFIRM,\n} from './actionTypes'\nexport function addTodo(content) {\n  return {\n    type: ADD_TODO,\n    payload: {\n      content,\n    },\n  }\n}\nexport function deleteTodo(id) {\n  return {\n    type: DELETE_TODO,\n    payload: { id },\n  }\n}\nexport function toggleTodo(id) {\n  return {\n    type: TOGGLE_TODO,\n    payload: { id },\n  }\n}\nexport function editTodo(id) {\n  return {\n    type: EDIT_TODO,\n    payload: { id },\n  }\n}\nexport function editConfirm(id, content) {\n  return {\n    type: EDIT_CONFIRM,\n    payload: {\n      id,\n      content,\n    },\n  }\n}\n","import {\n  ADD_TODO,\n  DELETE_TODO,\n  TOGGLE_TODO,\n  EDIT_TODO,\n  EDIT_CONFIRM,\n} from '../actionTypes.js'\n// 用 actionTypes 的目的是為了好 debug\n// 這裡是 todos 的 reducer ，就是 todos 要怎麼改動，都要在這邊寫下來\nlet todoId = 3 // 等等 id 會越來越多，從 3 開始加\nconst initialState = {\n  // 設定初始值\n  todos: [\n    {\n      id: 1,\n      content: '這是 Redux 版本的 todo',\n      isDone: true,\n      isEditing: false,\n    },\n    {\n      id: 2,\n      content: '把狀態交給 Redux',\n      isDone: false,\n      isEditing: false,\n    },\n  ],\n}\nexport default function todosReducer(state = initialState, action) {\n  // 設定 action\n  // 參數是用 action.payload.XX 傳進來\n  switch (action.type) {\n    case ADD_TODO: {\n      console.log(state) // 是一個物件 {todos:[{}, {}, {}]}\n      return {\n        todos: [\n          {\n            id: todoId++,\n            content: action.payload.content,\n            isDone: false,\n            isEditing: false,\n          },\n          ...state.todos,\n        ],\n      }\n    }\n    case DELETE_TODO: {\n      return {\n        todos: state.todos.filter(todo => todo.id !== action.payload.id),\n      }\n    }\n    case TOGGLE_TODO: {\n      return {\n        todos: state.todos.map(todo => {\n          if (todo.id !== action.payload.id) {\n            return todo\n          } else {\n            return {\n              ...todo,\n              isDone: !todo.isDone,\n            }\n          }\n        }),\n      }\n    }\n    case EDIT_TODO: {\n      return {\n        todos: state.todos.map(todo => {\n          if (todo.id !== action.payload.id) {\n            return todo\n          } else {\n            return {\n              ...todo,\n              isEditing: !todo.isEditing,\n            }\n          }\n        }),\n      }\n    }\n    case EDIT_CONFIRM: {\n      return {\n        todos: state.todos.map(todo => {\n          if (todo.id !== action.payload.id) {\n            return todo\n          } else {\n            return {\n              ...todo,\n              content: action.payload.content,\n              isEditing: !todo.isEditing,\n            }\n          }\n        }),\n      }\n    }\n    default: {\n      return state\n    }\n  }\n}\n","import { ADD_USER } from '../actionTypes'\nconst initialState = {\n  users: [],\n}\nexport default function todosReducer(state = initialState, action) {\n  console.log(['received', action])\n  switch (action.type) {\n    case ADD_USER: {\n      return {\n        ...state,\n        users: [\n          ...state.users,\n          {\n            name: action.payload.name,\n          },\n        ],\n      }\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n","import { combineReducers } from 'redux' // 可以把多個 reducer combine 在一起\nimport todos from './todos' // 要有個 todos.js 的檔案\nimport users from './users'\n\nexport default combineReducers({\n  todos,\n  users,\n})\n","import { createStore } from 'redux'\nimport rootReducer from './reducers'\n// 引入 reducers 這個資料夾底下的 reducer ，沒有寫說是哪個資料夾的話\n// 就是其中的 index.js，而 index.js 有把其他的檔案一起 combine 在一起了\n\nexport default createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}